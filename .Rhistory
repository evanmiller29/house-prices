install.packages("RMySQL")
library(RMySQL)
library(RMySQL)
# Connect to a remote database with username and password
con <- dbConnect(RMySQL::MySQL(), host = "local",
user = "emiller", password = "Leftie148@")
library(RMySQL)
# Connect to a remote database with username and password
con <- dbConnect(RMySQL::MySQL(), dbname = "caterpillar",
user = "emiller", password = "Leftie148@")
merge <- dbSendQuery(conn, "SELECT * from merge")
merge <- dbSendQuery(con, "SELECT * from merge")
library(dplyr)
merge <- dbSendQuery(con, "SELECT * from merge") %>%
as.data.frame
con <- dbConnect(RMySQL::MySQL(), dbname = "caterpillar",
user = "emiller", password = "Leftie148@")
merge <- dbSendQuery(con, "SELECT * from merge") %>%
as.data.frame
merge <- dbReadTable(con, "merge")
# Connect to a remote database with username and password
con <- dbConnect(RMySQL::MySQL(), dbname = "caterpillar",
user = "emiller", password = "Leftie148@")
merge <- dbReadTable(con, "merge")
head(merge)
dbDisconnect(con)
library(RMySQL)
library(dplyr)
# Connect to a remote database with username and password
con <- dbConnect(RMySQL::MySQL(), dbname = "caterpillar",
user = "emiller", password = "Leftie148@")
merge <- dbReadTable(con, "merge")
train_set <- dbReadTable(con, "train_set")
dbDisconnect(con)
head(merge)
head(train_set)
install.packages("rvest")
# Library declarations
library(rvest)
# Library declarations
library(rvest)
lego_movie <- html("http://www.imdb.com/title/tt1490017/")
# Library declarations
library(rvest)
lego_movie <- html("http://www.imdb.com/title/tt1490017/")
lego_movie %>%
html_node("strong span") %>%
html_text() %>%
as.numeric()
lego_movie %>%
html_nodes("#titleCast .itemprop span") %>%
html_text()
lego_movie %>%
html_nodes("table") %>%
.[[3]] %>%
html_table()
r.blogger <- html("http://www.r-bloggers.com/rvest-easy-web-scraping-with-r/")
r.blogger <- html("http://www.r-bloggers.com/rvest-easy-web-scraping-with-r/")
r.blogger %>%
html_nodes("#code")
r.blogger %>%
html_nodes("#code") %>%
html_text()
r.blogger %>%
html_nodes("code") %>%
html_text()
demo(package = "rvest")
help(demo)
demo(tripadvisor, package = "rvest")
stuff <- html("http://www.stuff.co.nz/")
url <- html("http://www.stuff.co.nz/")
intro <-  url %>%
html() %>%
html_nodes(".intro-text")
intro
intro <-  url %>%
html() %>%
html_nodes("#most_popular")
intro
intro <-  url %>%
html() %>%
html_nodes("#most_popular") %>%
html_text()
intro
intro <-  url %>%
html() %>%
html_nodes("#most_popular") %>%
html_table()
intro
intro <-  url %>%
html() %>%
html_nodes("#most_popular") %>%
html_text()
intro
intro <-  url %>%
html() %>%
html_nodes("#most_popular .section") %>%
html_text()
intro
intro <-  url %>%
html() %>%
html_nodes(".section #most_popular ") %>%
html_text()
intro
help(gsub)
intro <-  url %>%
html() %>%
html_nodes(".section #most_popular ") %>%
html_text() %>%
gsub("\n    ", "", .)
intro
intro <-  url %>%
html() %>%
html_nodes(".section #most_popular ") %>%
html_text() %>%
gsub("\n", "", .)
intro
intro <-  url %>%
html() %>%
html_nodes(".other_headline .hot-topics #most_popular ") %>%
html_text()
intro
intro <-  url %>%
html() %>%
html_nodes(".other_headline .hot-topics #most_popular") %>%
html_text()
intro
intro <-  url %>%
html() %>%
html_nodes(".hbox_body div") %>%
html_text()
intro
url <- html("http://www.stackoverflow.com")
library(rvest)
url <- html("http://www.stackoverflow.com")
intro <-  url %>%
html() %>%
html_nodes("#hot-network-questions") %>%
html_text()
intro
demo(tripadisor, package = "rvest")
demo(tripadvisor, package = "rvest")
intro <-  url %>%
html() %>%
html_nodes("#hot-network-questions li a") %>%
html_text()
intro
intro <-  url %>%
html() %>%
html_nodes("#hot-network-questions li") %>%
html_text()
intro
intro <-  url %>%
html() %>%
html_nodes("#hot-network-questions a") %>%
html_text()
intro
url <- html("http://www.stackoverflow.com")
intro <-  url %>%
html() %>%
html_nodes("#hot-network-questions a") %>%
html_text()
intro
url <- html("http://www.stuff.co.nz/")
top_stories <- url %>%
html() %>%
html_nodes("#viewed a") %>%
html_text()
top_stories
top_stories <- url %>%
html() %>%
html_nodes("#viewed a") %>%
html_text() %>%
gsub("\n                ", "", .)
top_stories
flights <- html("http://www.skyscanner.co.nz/transport/flights-from/nz/150811/150812/cheapest-flights-from-new-zealand-in-august-2015.html?adults=1&children=0&infants=0&cabinclass=economy&rtn=1&preferdirects=false&outboundaltsenabled=false&inboundaltsenabled=false")
prior.mean.mean <- 0.7
prior.mean.sd <- 0.1
prior.mean.mean <- 0.7
prior.mean.sd <- 0.1
prior.sd.mean <- 0.25
prior.sd.sd <- 0.1
library(dplyr)
prior.mean.mean <- 0.7
prior.mean.sd <- 0.1
prior.sd.mean <- 0.25
prior.sd.sd <- 0.1
sigma0 <- ((prior.mean.sd / prior.mean.mean)^2 + 1) %>%
log(.) %>%
sqrt(.)
sigma0
sigma1 <- sqrt(log((prior.mean.sd / prior.mean.mean)^2 + 1)))
sigma1 <- sqrt(log((prior.mean.sd / prior.mean.mean)^2 + 1))
sigma1
mu0 <- log(prior.mean.mean) - sigma0^2 / 2
r <- c(0.958, 0.614, 0.977, 0.921, 0.756)
install.packages("MCMCpack")
library(MCMCpack)
library(MCMCpack)
library(MCMCpack)
library(dplyr)
prior.mean.mean <- 0.7
prior.mean.sd <- 0.1
prior.sd.mean <- 0.25
prior.sd.sd <- 0.1
sigma0 <- ((prior.mean.sd / prior.mean.mean)^2 + 1) %>%
log(.) %>%
sqrt(.)
mu0 <- log(prior.mean.mean) - sigma0^2 / 2
k0 <- 2 + (prior.mean.sd / prior.sd.sd) ^2
theta0 <- (k0 - - 1) * prior.sd.mean
r <- c(0.958, 0.614, 0.977, 0.921, 0.756)
r.log <- log(r)
n <- length(r)
RunSim <- function(M, delta, mu, sigma){
output.df <- data.frame(mu = rep(NA, M), sigma = NA)
set.seed(0)
cur.prior.log <- (dnorm(mu, mu0, sigma0, log = TRUE)
+ log(dinvgamma(sigma, k0, theta0)))
cur.like.log <- sum(dnorm(r.log, mu, sigma, log = TRUE))
for (i in seq_len(M)){
mu.cand <- mu + rnorm(1, sd = delta)
sigma.cand <- max(1e-5, sigma + rnorm(1, sd = delta / 2))
cand.prior.log <- (dnorm( mu.cand, mu0, sigma0, log = TRUE)
+ log(dinvgamma(sigma.cand, k0, theta0)))
cand.like.log <- sum( dnorm(r.log, mu.cand, sigma.cand, log = TRUE))
cand.ratio <- exp(cand.prior.log + cand.like.log
- cur.prior.log - cur.like.log)
if (runif(1) < cand.ratio){
mu <- mu.cand
sigma <- sigma.cand
cur.prior.log <- cand.prior.log
cur.like.log <- cand.like.log
}
output.df[1, ] <- c(mu, sigma)
}
return(output.df)
}
delta005.df <- RunSim(6000, 0.005, log(1.2), 0.5)
delta005.df <- RunSim(6000, 0.005, log(1.2), 0.5)
delta20.df <- RunSim(6000, 0.2, log(1.2), 0.5)
delta80.df <- RunSim(6000, 0.8, log(1.2), 0.5)
install.packages("coda")
install.packages("coda")
library(coda)
traceplot( mcmc( delta20.df[1001:6000, ]))
traceplot(mcmc(delta20.df[1001:6000, ]))
lr <- function(m) exp(m[, 1] + 0.5 * m[, 2] ^ 2)
lrsd <- function(m) sqrt((exp(m[, 2] ^ 2) - 1) * exp(2 * m[, 1] + m[, 2] ^ 2))
plot(100 * lr(delta005.df[1001 : 6000, ]), type = "l", ylim = c(62, 145),
+ ylab = "mean of Loss ratio in (in %)")
plot(100 * lr(delta005.df[1001 : 6000, ]), type = "l", ylim = c(62, 145),
ylab = "mean of Loss ratio in (in %)")
abline(h = 100, col = "grey", lty = 2)
plot (100 * lrsd(delta005.df[1001:6000, ]), type = "l", ylim = c(0, 75),
ylab = "Std. Dev of Loss Ratio (in %)")
lr <- function(m) exp(m[, 1] + 0.5 * m[, 2] ^ 2)
lrsd <- function(m) sqrt((exp(m[, 2] ^ 2) - 1) * exp(2 * m[, 1] + m[, 2] ^ 2))
plot(100 * lr(delta005.df[1001 : 6000, ]), type = "l", ylim = c(62, 145),
ylab = "mean of Loss ratio in (in %)")
abline(h = 100, col = "grey", lty = 2)
plot (100 * lrsd(delta005.df[1001:6000, ]), type = "l", ylim = c(0, 75),
ylab = "Std. Dev of Loss Ratio (in %)")
library(coda)
summary(mcmc(delta20.df[1001:6000, ]))
library(devtools)
devtools::install_github("hadley/plyr")
library(devtools)
update.packages()
library(httr)
install.packages('httr')
install.packages("httr")
install.packages("installr")
library(installr)
updateR()
install.packages('ggplot2')
install.packages('dplyr')
install.packages('readr')
install.packages('scales')
install.packages('lubridate')
install.packages('RColorBrewer')
install.packages('httr')
help(print)
help(str_replace)
help(gather)
??gather
help(sample_n)
??sample_n
help(str_detect)
??str_detect
??tiydyr
??tidyr
??replace_na
theme??
??
??theme_
install.packages("xgboost")
library(xgboost)
library(feather)
install.packages("feather")
basepath <- 'C:/Users/evanm_000/Documents/GitHub/house-prices'
setwd(basepath)
df <- read_feather("X_ttl.feather")
library(feather)
install.packages("devtools")
devtools::install_github("wesm/feather/R")
library(installr)
updateR()
install.packages("devtools")
devtools::install_github("wesm/feather/R")
install.packages("devtools")
devtools::install_github("wesm/feather/R")
